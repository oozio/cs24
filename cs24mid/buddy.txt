Buddy Allocator
===============

Put your answers for the buddy-allocator problem in this file.  You must keep
lines to 80 characters or less, with the exception of the block pictures, which
go slightly beyond the 80-character limit.

For part d, you can describe the heap state as follows:

Initial:

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |                                                                               |
  |                                                                               |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

Step i:  [alloc/free stuff]

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |                                                                               |
  |                                                                               |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

Indicate boundaries between blocks with "|" characters.  Since the
problem specifies a 16KiB heap, each "+----+" section represents 1KiB.

At the start of each allocated or free block in the heap, put the
following values:

 * On the first line, put "O? _" where ? is the order of the block, and
   "_" indicates a free block, or A/B/C/D/E indicates the name of the
   allocated block.

 * On the second line, put the size of the block:  for a free block, you
   can put "??KB", where this is the size of the free block.  For a used
   block, put "????", indicating the number of bytes in the used block.

For example, after a 6000 byte allocation, you might have this:

Step 1:  A = alloc(6000);

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |O8 A                                   |O8 _                                   |
  |6000                                   |8KB                                    |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

==== PUT YOUR ANSWERS BELOW THIS LINE (which is 80 chars long) =================

a)  Maximum size order of 2GiB heap
a block of order i has size (32 bytes) * 2^i; since the heap is 2GiB = 2^31
bytes, 2^i = (2^31)/32, i = log base 2 of (2^31/32) = 26. So the max order
is 26.

If an allocation request needs a block of this size, and this block is free,
then the free list has length 1 right before the allocation request completes,
since this max order block is its only element. After the request finishes,
the free list has length 0, since all the space is taken up, and there are 
no free blocks.


b)  Implementation of get_order_of_size()

#include <math.h>
int get_order_of_size(int size) {
  assert(size > 0);
  int result = ceil ( log(size / MIN_BLOCK_SIZE) / log(2) );
  return result;
}


c)  Detecting failed allocation requests

When we receive an allocation request, we can find the minimum order needed 
with the function in (b). Then, we look at the order'th index of the 
free-list, which should contain a list of available blocks of that order.

If that list is empty, then we add 1 to order and look again in that index
of the free-list; repeat this untli we either find a list of free blocks
with at least 1 element, or we exhaust the free-list.

If we exhaust the free-list, return NULL.

Otherwise, we found a list of free blocks that's big enough to hold the
request, and we can allocate successfully.


d)  Sequence of allocations and deallocations for 16KiB heap

Initial:

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |09 _                                                                           |
  |16 KiB                                                                         |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

Step 1:  A = allocate(1400)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 A     |06 _     |07 _               |08 _                                   |
  |1400     |2 KiB    |4 KiB              |8 KiB                                  |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

Step 2:  B = allocate(5500)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 A     |06 _     |07 _               |08 B                                   |
  |1400     |2 KiB    |4 KiB              |5500                                   |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

Step 3:  C = allocate(800)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 A     |06 C     |07 _               |08 B                                   |
  |1400     |800      |4 KiB              |5500                                   |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

Step 4:  D = allocate(3200)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 A     |06 C     |07 D               |08 B                                   |
  |1400     |800      |3200               |5500                                   |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

Step 5:  free(A)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 _     |06 C     |07 D               |08 B                                   |
  |2 KiB    |800      |3200               |5500                                   |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

Step 6:  E = allocate(700)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 E     |06 C     |07 D               |08 B                                   |
  |700      |800      |3200               |5500                                   |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

Step 7:  free(B)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 E     |06 C     |07 D               |08 _                                   |
  |700      |800      |3200               |8 KiB                                  |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

Step 8:  free(C)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 E     |06 _     |07 D               |08 _                                   |
  |700      |2 KiB    |3200               |8 KiB                                  |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

Step 8:  free(E)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |06 _     |06 _     |07 D               |08 _                                   |
  |2 KiB    |2 KiB    |3200               |8 KiB                                  |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

  then

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |07 _               |07 D               |08 _                                   |
  |4 KiB              |3200               |8 KiB                                  |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 


Step 9: free(D)

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |07 _               |07 _               |08 _                                   |
  |4 KiB              |4 KiB              |8 KiB                                  |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

  then

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |08 _                                   |08 _                                   |
  |8 KiB                                  |8 KiB                                  |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+ 

  then

  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |09 _                                                                           |
  |16 KiB                                                                         |
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+


After step 4, 0 bytes are available to satisfy requests, but 
16384 - 1400 - 550 - 800 - 3200 =  10434 bytes are still unused, but not 
available.


e)  Limitation of buddy allocators
They can waste a lot of space; within an allocated block, there can be lots 
of unused bytes, but since those unused bytes are fragmented, we can't use
them for future requests.

They can also be really slow, since they may need to divide the minimum order 
block several times.


f)  Placement strategy of buddy allocators
Even though this wastes a lot of space, buddy allocators still use a best-fit
policy, since they examine all the free blocks, create a block that's as 
small as possible, and then choose it to satuisfy the request.


g)  Deferred coalescing

Deferring coalescing is probably faster than coalescing immediately; if we had
a heap state like this,
  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
  |A                              |B              |C              |
  |8                              |4              |4              |
  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+ 

  and we delayed coalescing after freeing A, B, and C, then if we wanted to
  allocate a 4 unit block, we can just allocate B, instead of squishing ABC 
  together into a 16 unit block, and then subdividing twice to get a 4 unit block.