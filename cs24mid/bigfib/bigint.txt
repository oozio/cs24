------------------------------------------------------------------------------
1)  Pseudocode for __add_bigint

draft (?) 1:
if size is 0, return 1
otherwise:
	zero an unsigned 64-bit int, call it c
	repeat size times: each time, increment i
		check carry counter
		set c to carry counter
		add the i'th 64-bit-component of a to the i'th component of b
		add that to c
		increment carry counter if c overflows

	at the end, if the carry counter is 0, return 1
				otherwise, return 0

draft 2:

compare size to 0; if they're equal, set rax to 1 and jump to program_end, 
	where we return
otherwise:
	clear and push the carry flag, since it'll change when we test the loop 
		counter, and we always want to use the relevant carry out
	set a loop counter

start a section called loop_beginning:

compare loop counter to size; if they're equal, jump to loop_end, where we
	should check whether we overflowed at the end, returning 1 if no and 0
	if yes

	this also updates the carry flag, so we need to keep that in mind for
		the next addition

otherwise: 
	recall previous carry flag
	add b[loop counter] and a[loop counter] with carrying
		this updates the carry flag, but it'll get overwritten by the next
		loop counter comparison unless we remember it in the stack
	increment loop counter
	save carry flag
	go back to loop_beginning

start a section called loop_end:

recall and check the carry flag
if it's zero, set return register to 1 and jump to program_end, where we ret
set return register to 0

start a section called program_end:

return

------------------------------------------------------------------------------
3)  Largest n for fib(n) using four 64-bit quadwords for bigint:

370: since we have 4 * 64 = 256 available bits, the largest number we can 
store is 2^256 - 1 ~ 1.15 * 10^77, 

Fib(370) is 9 * 10^76, and Fib(371) is 1.5 * 10^77, so the biggest n we can
find is 370.

If we run ./bigfib n 4, where n > 370, we also see that that's the last 
findable value.


------------------------------------------------------------------------------
4)  Number of 64-bit quadwords required for fib(2000), and value of fib(2000):

n = 22; fib(2000) is ~ 4.2 * 10^417; n = 22 gives maximum of ~ 7 * 10^423,
and n = 21 gives maximum of ~ 4 * 10^404, which means we need 22 64-bit qwords
to store fib(2000). 

Also if we run ./bigfib 2000 n, where n < 22, we'll get an overflow abort. 

fib(2000) = 4,224,696,333,392,304,878,706,725,602,341,482,782,579,852,840,250,
681,098,010,280,137,314,308,584,370,130,707,224,123,599,639,141,511,088,446,
087,538,909,603,607,640,194,711,643,596,029,271,983,312,598,737,326,253,555,
802,606,991,585,915,229,492,453,904,998,722,256,795,316,982,874,482,472,992,
263,901,833,716,778,060,607,011,615,497,886,719,879,858,311,468,870,876,264,
597,369,086,722,884,023,654,422,295,243,347,964,480,139,515,349,562,972,087,
652,656,069,529,806,499,841,977,448,720,155,612,802,665,404,554,171,717,881,
930,324,025,204,312,082,516,817,125

